//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit2.h"
#include "Unit1.h"
#include "Unit3.h"
#include "Unit4.h"
#include "books.h"
#include <registry.hpp>
#include <wchar.h>
#include <locale.h>
#include <string.h>
#include <vector>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TmainForm *mainForm;


class myFileFormat {
public:
	 wchar_t name[15];
	 float version;

	 myFileFormat() {
		 wcsncpy(name, L"MyFileFormat", 15);
		 version = 1.0;
	 }
};

class Book{
public:
   wchar_t* name; wchar_t* authorName; wchar_t* authorSurname; wchar_t* review;
   int pageNum; int rating;

   Book() = default;
   Book(const wchar_t* _name,const  wchar_t* _authorName, const wchar_t* _authorSurname, const wchar_t* _review, int _pageNum, int _rating)
   {
	   std::wcsncpy(name, _name, 25);
	   std::wcsncpy(authorName, _authorName, 25);
	   std::wcsncpy(authorSurname, _authorSurname, 25);
	   std::wcsncpy(review, _review, 256);
	   pageNum = _pageNum;
	   rating = _rating;
   }

};
//---------------------------------------------------------------------------
__fastcall TmainForm::TmainForm(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::ratingSubmitButtonClick(TObject *Sender)
{

	  displayField->Lines->Add("Book name: " + bookName->Text);
	  displayField->Lines->Add("Book length: " + bookPageNum->Text);
	  displayField->Lines->Add("Author: " + autorName->Text + autorSurname->Text);
	  if(ratingOne->Checked) {
		  displayField->Lines->Add("Rating: 1 ");
	  }
	  else if(ratingTwo->Checked) {
		 displayField->Lines->Add("Rating: 2 ");
	  }
	  else if(ratingThree->Checked) {
		 displayField->Lines->Add("Rating: 3");
	  }
	  else if(ratingFour->Checked) {
		  displayField->Lines->Add("Rating: 4");
	  }
	  else if(ratingFive->Checked) {
		  displayField->Lines->Add("Rating: 5");
	  }
	  else {
		  ShowMessage("No rating selected...");
	  }

}
//---------------------------------------------------------------------------


void __fastcall TmainForm::saveButtonClick(TObject *Sender)
{
	if(SaveDialog ->Execute() == true) {
	   displayField->Lines->SaveToFile(SaveDialog->FileName) ;
	}


}
//---------------------------------------------------------------------------

void __fastcall TmainForm::openButtonClick(TObject *Sender)
{
	if(OpenDialog ->Execute() == true) {
	   displayField->Lines->LoadFromFile(OpenDialog->FileName) ;
	}
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::Exit1Click(TObject *Sender)
{
	if(Application->MessageBox(L"Exit the application?", L"Exit", MB_YESNO|MB_ICONEXCLAMATION|MB_DEFBUTTON2) == IDYES)
	   Application->Terminate();
}
//---------------------------------------------------------------------------


void __fastcall TmainForm::reviewButtonClick(TObject *Sender)
{
	reviewForm->Show();
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::ratingButtonClick(TObject *Sender)
{
	   ratingForm->ShowModal();
}
//---------------------------------------------------------------------------


void __fastcall TmainForm::FormClose(TObject *Sender, TCloseAction &Action)
{
   TIniFile* ini = new TIniFile(GetCurrentDir() + "\\settings.ini");
   ini->WriteInteger("Main Windows", "Left", Left);
   ini->WriteInteger("Main Windows", "Top", Top);
   ini->WriteInteger("Main Windows", "Width", Width);
   ini->WriteInteger("Main Windows", "Height", Height);
   ini->WriteInteger("Main Windows", "Font.Height", Font->Height);
   ini->WriteString("Main Windows", "Font.Name", Font->Name);

   delete ini;
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::FormCreate(TObject *Sender)
{
   TIniFile* ini = new TIniFile(GetCurrentDir() + "\\settings.ini");
   Left = ini->ReadInteger("Main Windows", "Left", 0);
   Top = ini->ReadInteger("Main Windows", "Top", 0);
   Width = ini->ReadInteger("Main Windows", "Width", 600);
   Height = ini->ReadInteger("Main Windows", "Height", 500);
   Font->Height = ini->ReadInteger("Main Windows", "Font.Height", Font->Height);
   Font->Name = ini->ReadString("Main Windows", "Font.Name", Font->Name);
   delete ini;
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::ChangeFontClick(TObject *Sender)
{
	 changeFontForm->ShowModal();
	 Font->Height = changeFontForm->fontSizeField->Text.ToInt();
	 Font->Name = changeFontForm->fontStyleField->Text;
}
//---------------------------------------------------------------------------


void __fastcall TmainForm::xmlLoadButtonClick(TObject *Sender)
{
   _di_IXMLbooksType Books = Getbooks(XMLDocument1);

   bookList->Items->Clear();
   for(int i = 0; i < Books->Count; i++){
	  bookList->Items->Add();

	  bookList->Items->Item[i]->Caption = Books->book[i]->name;
	  bookList->Items->Item[i]->SubItems->Add(Books->book[i]->authorName);
	  bookList->Items->Item[i]->SubItems->Add(Books->book[i]->authorSurname);
	  bookList->Items->Item[i]->SubItems->Add(Books->book[i]->pageNum);
	  bookList->Items->Item[i]->SubItems->Add(Books->book[i]->rating);
	  bookList->Items->Item[i]->SubItems->Add(Books->book[i]->review);
   }
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::xmlAddButtonClick(TObject *Sender)
{

   int finalRating;
   _di_IXMLbooksType Books = Getbooks(XMLDocument1);
   _di_IXMLbookType Book = Books->Add();

   Book->name = bookName->Text;
   Book->authorName = autorName->Text;
   Book->authorSurname = autorSurname->Text;
   Book->pageNum = bookPageNum->Text.ToInt();
   if(ratingOne->Checked) {
		 finalRating = 1;
	  }
	  else if(ratingTwo->Checked) {
		 finalRating = 2;
	  }
	  else if(ratingThree->Checked) {
		 finalRating = 3;
	  }
	  else if(ratingFour->Checked) {
		  finalRating = 4;
	  }
	  else if(ratingFive->Checked) {
		  finalRating = 5;
	  }
	  else {
		  finalRating = 0;
	  }
   Book->rating = finalRating;
   Book->review = reviewForm->reviewText->Text;

   XMLDocument1->SaveToFile(XMLDocument1->FileName);

}
//---------------------------------------------------------------------------


void __fastcall TmainForm::xmlDeleteButtonClick(TObject *Sender)
{
   _di_IXMLbooksType Books = Getbooks(XMLDocument1);
   Books->Delete(bookList->ItemIndex);
   XMLDocument1->SaveToFile(XMLDocument1->FileName);
}
//---------------------------------------------------------------------------

void __fastcall TmainForm::SaveasCustom1Click(TObject *Sender)
{

	// bookName to wchar_t
	String narrowBookName = bookName->Text;
	std::wstring wideBookName = std::wstring(narrowBookName.begin(), narrowBookName.end());
	const wchar_t* bookNameCon = wideBookName.c_str();

	// authorName to wchar_t
	String narrowAuthorName = autorName->Text;
	std::wstring wideAuthorName = std::wstring(narrowAuthorName.begin(), narrowAuthorName.end());
	const wchar_t* authorNameCon = wideAuthorName.c_str();


	 std::vector<Book> books =
	 {Book(bookNameCon,authorNameCon,L"bookauthorsurname",L"epicreview",234,3)};


}
//---------------------------------------------------------------------------


